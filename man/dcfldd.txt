NAME
  dcfldd - enhanced version of dd for forensics and security

SYNOPSIS
  dcfldd [OPTION]...

DESCRIPTION
  Copy a file, converting and formatting according to the options.

  dcfldd was initially developed at Department of Defense Computer Forensics Lab (DCFL). This tool is
  based on the dd program with the following additional features:

  - Hashing on-the-fly: dcfldd can hash the input data as it is being transferred, helping to ensure
    data integrity.
  - Status output: dcfldd can update the user of its progress in terms of the amount of data transferred
    and how much longer operation will take.
  - Flexible disk wipes: dcfldd can be used to wipe disks quickly and with a known pattern if desired.
  - Image/wipe verify: dcfldd can verify that a target drive is a bit-for-bit match of the specified
    input file or pattern.
  - Multiple outputs: dcfldd can output to multiple files or disks at the same time.
  - Split output: dcfldd can split output to multiple files with more configurability than the split
    command.
  - Piped output and logs: dcfldd can send all its log data and output to commands as well as files
    natively.

OPTIONS
  bs=BYTES          Force ibs=BYTES and obs=BYTES.
  cbs=BYTES         Convert BYTES bytes at a time.
  conv=KEYWORDS     Convert the file as per the comma separated keyword list.
  count=BLOCKS      Copy only BLOCKS input blocks.
  ibs=BYTES         Read BYTES bytes at a time.
  if=FILE           Read from FILE instead of stdin.
  obs=BYTES         Write BYTES bytes at a time.
  of=FILE           Write to FILE instead of stdout. NOTE: of=FILE may be used several times to write output to
                    multiple files simultaneously.
  of:=COMMAND       Exec and write output to process COMMAND.
  seek=BLOCKS       Skip BLOCKS obs-sized blocks at start of output.
  skip=BLOCKS       Skip BLOCKS ibs-sized blocks at start of input.
  pattern=HEX       Use the specified binary pattern as input.
  textpattern=TEXT  Use repeating TEXT as input.
  errlog=FILE       Send error messages to FILE as well as stderr.
  hashwindow=BYTES  Perform a hash on every BYTES amount of data.
  hash=NAME         Either md5, sha1, sha256, sha384 or sha512. Default algorithm is md5. To select multiple
                    algorithms to run simultaneously enter the names in a comma separated list.
  hashlog=FILE      Send MD5 hash output to FILE instead of stderr. If you are using multiple hash algorithms
                    you can send each to a separate file using the convention ALGORITHMlog=FILE, for example
                    md5log=FILE1, sha1log=FILE2, etc.
  hashlog:=COMMAND  Exec and write hashlog to process COMMAND.
  ALGORITHMlog:=COMMAND    Also works in the same fashion of hashlog:=COMMAND.
  hashconv=[before|after]  Perform the hashing before or after the conversions.
  hashformat=FORMAT        Display each hashwindow according to FORMAT the hash format mini-language is described below.
  totalhashformat=FORMAT   Display the total hash value according to FORMAT.
  status=[on|off]          Display a continual status message on stderr. Default state is "on".
  statusinterval=N         Update the status message every N blocks. Default value is 256.
  sizeprobe=[if|of]        Determine the size of the input or output file for use with status messages. This
                           option gives you a percentage indicator. WARNING: do not use this option against a
                           tape device.
  split=BYTES              Write every BYTES amount of data to a new file. This operation applies to any of=FILE
                           that follows.
  splitformat=TEXT         The file extension format for split operation. You may use any number of "a" or "n" in any
                           combo the default format is "nnn". NOTE: the split and splitformat options take effect only
                           for output files specified AFTER these options appear in the command line. Likewise, you
                           may specify these several times for for different output files within the same command line.
                           You may use as many digits in any combination you would like. E.g. "anaannnaana" would be
                           valid, but quite insane.
  vf=FILE                  Verify that FILE matches the specified input.
  verifylog=FILE           Send verify results to FILE instead of stderr.
  verifylog:=COMMAND       Exec and write verify results to process COMMAND.
  --help                   Display a help page and exit.
  --version                Output version information and exit.

BLOCKS AND BYTES
  BLOCKS and BYTES may be followed by the following multiplicative suffixes: xM M, c 1, w 2, b 512, kD 1000,
  k 1024, MD 1,000,000, M 1,048,576, GD 1,000,000,000, G 1,073,741,824, and so on for T, P, E, Z, Y.

KEYWORDS
  Each KEYWORD may be:

  ascii  From EBCDIC to ASCII.
  ebcdic  From ASCII to EBCDIC.
  ibm     From ASCII to alternated EBCDIC.
  block   Pad newline-terminated records with spaces to cbs-size.
  unblock  Replace trailing spaces in cbs-size records with newline.
  lcase    Change upper case to lower case.
  notrunc  Do not truncate the output file.
  ucase    Change lower case to upper case.
  swab     Swap every pair of input bytes.
  noerror  Continue after read errors.
  sync     Pad every input block with NULs to ibs-size. When used with block or unblock, pad with spaces rather
           than NULs.

FORMAT
  The structure of FORMAT may contain any valid text and special variables. The built-in variables are the
  following format: #variable_name#. To pass FORMAT strings to the program from a command line, it may be necessary to
  surround your FORMAT strings with "quotes."  The built-in variables are listed below:

  window_start  The beginning byte offset of the hashwindow.
  window_end    The ending byte offset of the hashwindow.
  block_start   The beginning block (by input blocksize) of the window.
  block_end     The ending block (by input blocksize) of the hash window.
  hash          The hash value.
  algorithm     The name of the hash algorithm.

  For example, the default FORMAT for hashformat and totalhashformat are:

    hashformat="#window_start# - #window_end#: #hash#" totalhashformat="Total (#algorithm#): #hash#"

  The FORMAT structure accepts the following escape codes:

  \\n  Newline.
  \\t  Tab.
  \\r  Carriage return.
  \\   Insert the '\\' character.
  ##   Insert the '#' character as text, not a variable.

REPORTING BUGS
  Report bugs at https://github.com/resurrecting-open-source-projects/dcfldd/issues

AUTHORS
  dcfldd was originally written by Nicholas Harbour. Currently is maintained by some voluntairs.

  GNU dd was written by Paul Rubin, David MacKenzie and Stuart Kemp.
